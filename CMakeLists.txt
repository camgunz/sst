PROJECT("SST" C)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0 FATAL_ERROR)

INCLUDE(CheckCCompilerFlag)

IF(${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
  MESSAGE(FATAL_ERROR "Cannot build source in-tree.")
ENDIF()

IF((NOT DEFINED CMAKE_BUILD_TYPE) OR (CMAKE_BUILD_TYPE STREQUAL ""))
  SET(CMAKE_BUILD_TYPE Release)
  SET(DEBUGGING FALSE)
ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL "Release")
  SET(DEBUGGING FALSE)
ELSEIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(DEBUGGING TRUE)
ELSE()
  MESSAGE(FATAL_ERROR "Unknown build type ${CMAKE_BUILD_TYPE}")
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

SET(VERSION "0")
SET(PACKAGE "SST")
SET(PACKAGE_NAME "SST")
SET(PACKAGE_VERSION "${VERSION}")
SET(PACKAGE_STRING "${PACKAGE_NAME} v${PACKAGE_VERSION}")
SET(PACKAGE_TARNAME "sst")
SET(PACKAGE_URL "http://github.com/camgunz/sst")

IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  SET(CLANG TRUE)
ELSE()
  SET(CLANG FALSE)
ENDIF()

IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  SET(GCC TRUE)
ELSE()
  SET(GCC FALSE)
ENDIF()

IF(CLANG OR GCC)
  SET(GCC_OR_CLANG TRUE)
ELSE()
  SET(GCC_OR_CLANG FALSE)
ENDIF()

FUNCTION(ADD_CFLAG flag flag_supported)
  CHECK_C_COMPILER_FLAG(${flag} ${flag_supported})
  IF(${flag_supported})
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}" PARENT_SCOPE)
  ENDIF()
ENDFUNCTION(ADD_CFLAG flag flag_supported)

CHECK_C_COMPILER_FLAG(-std=c99 C99_SUPPORTED)
IF(${C99_SUPPORTED})
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
ENDIF()

# IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
#   CHECK_C_COMPILER_FLAG(-Werror WARNINGS_ARE_ERRORS_SUPPORTED)
#   IF(${WARNINGS_ARE_ERRORS_SUPPORTED})
#     SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
#   ENDIF()
# ENDIF()

ADD_CFLAG(-march=native ARCH_NATIVE_SUPPORTED)
ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)

IF(DEBUGGING)
  IF(GCC)
    ADD_CFLAG(-fstack-check STACK_CHECK_SUPPORTED)
  ELSEIF(CLANG)
    ADD_CFLAG(-Werror WARNINGS_ARE_ERRORS_SUPPORTED)
    ADD_CFLAG(-fsanitize=address,thread,undefined
      ADDRESS_THREAD_UB_SANITIZATION_SUPPORTED)
  ENDIF()
  ADD_CFLAG(-fstack-protector-all STACK_PROTECTOR_ALL_SUPPORTED)
  ADD_CFLAG(-ftrapv TRAPV_SUPPORTED)
  ADD_CFLAG(-fbounds-checking BOUNDS_CHECKING_SUPPORTED)
  ADD_CFLAG(-g DEBUGGING_SUPPORTED)
  ADD_CFLAG(-O0 O0_SUPPORTED)
ELSE()
  ADD_CFLAG(-O3 O3_SUPPORTED)
ENDIF()

FIND_PACKAGE(GLib REQUIRED)
INCLUDE_DIRECTORIES(${GLIB_INCLUDE_DIRS})

FIND_PACKAGE(PCREPOSIX REQUIRED)
INCLUDE_DIRECTORIES(${PCRE_INCLUDE_DIR})

FIND_PACKAGE(UTF8Proc REQUIRED)
INCLUDE_DIRECTORIES(${UTF8Proc_INCLUDE_DIR})

FIND_PACKAGE(GMP REQUIRED)
INCLUDE_DIRECTORIES(${GMP_INCLUDE_DIR})

FIND_PACKAGE(MPFR REQUIRED)
INCLUDE_DIRECTORIES(${MPFR_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

IF(GCC_OR_CLANG)
  ADD_DEFINITIONS(-D_GNU_SOURCE)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)

SET(LIBSST_SOURCE_FILES
  ${CMAKE_SOURCE_DIR}/src/array.c
  ${CMAKE_SOURCE_DIR}/src/lexer.c
  ${CMAKE_SOURCE_DIR}/src/parser.c
  # ${CMAKE_SOURCE_DIR}/src/splitter.c
  ${CMAKE_SOURCE_DIR}/src/str.c
  ${CMAKE_SOURCE_DIR}/src/utils.c
  ${CMAKE_SOURCE_DIR}/src/value.c
)

SET(LIBSST_LIBRARIES ${SST_LIBRARIES}
  ${GLIB_LIBRARIES}
  ${PCRE_LIBRARIES}
  ${MPFR_LIBRARIES}
  ${GMP_LIBRARIES}
)

ADD_LIBRARY(libsst ${LIBSST_SOURCE_FILES})
TARGET_LINK_LIBRARIES(libsst ${LIBSST_LIBRARIES})

ADD_EXECUTABLE(sst ${CMAKE_SOURCE_DIR}/src/main.c)
TARGET_LINK_LIBRARIES(sst libsst)

ADD_EXECUTABLE(test_sst ${CMAKE_SOURCE_DIR}/tests/test.c)
IF(DEBUGGING)
  IF(CLANG)
    ADD_CFLAG(--coverage COVERAGE_SUPPORTED)
  ELSEIF(GCC)
    ADD_CFLAG(-fprofile-arcs PROFILE_ARCS_SUPPORTED)
    ADD_CFLAG(-test-coverage TEST_COVERAGE_SUPPORTED)
  ENDIF()
ENDIF()
TARGET_LINK_LIBRARIES(test_sst libsst)

SET(BIN_DIR "${PREFIX}/bin")
SET(LIB_DIR "${PREFIX}/lib")
SET(INCLUDE_DIR "${PREFIX}/include")
SET(SHARE_DIR "${PREFIX}/share")

INSTALL(
  TARGETS libsst sst
  RUNTIME DESTINATION ${BIN_DIR}
  LIBRARY DESTINATION ${LIB_DIR}
  ARCHIVE DESTINATION ${LIB_DIR}
)

# vi: ai:ts=2:sw=2:et

