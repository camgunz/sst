PROJECT("SST" C)

CMAKE_MINIMUM_REQUIRED(VERSION 3.0.2 FATAL_ERROR)

IF(${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
  MESSAGE(FATAL_ERROR "Cannot build source in-tree.")
ENDIF()

IF(NOT DEFINED CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckSymbolExists)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckTypeSize)
INCLUDE(CheckCSourceCompiles)
INCLUDE(CheckCCompilerFlag)
INCLUDE(CMakeDependentOption)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

SET(VERSION "0")
SET(PACKAGE "SST")
SET(PACKAGE_NAME "SST")
SET(PACKAGE_VERSION "${VERSION}")
SET(PACKAGE_STRING "${PACKAGE_NAME} v${PACKAGE_VERSION}")
SET(PACKAGE_TARNAME "sst")
SET(PACKAGE_URL "http://github.com/camgunz/sst")

IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  SET(CLANG TRUE)
ELSE()
  SET(CLANG FALSE)
ENDIF()

IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  SET(GCC TRUE)
ELSE()
  SET(GCC FALSE)
ENDIF()

IF(CLANG OR GCC)
  SET(GCC_OR_CLANG TRUE)
ELSE()
  SET(GCC_OR_CLANG FALSE)
ENDIF()

FUNCTION(ADD_CFLAG flag flag_supported)
  CHECK_C_COMPILER_FLAG(${flag} ${flag_supported})
  IF(${flag_supported})
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}" PARENT_SCOPE)
  ENDIF()
ENDFUNCTION(ADD_CFLAG flag flag_supported)

IF(GCC)
  ADD_CFLAG(-std=c99 C99_SUPPORTED)

  IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    ADD_CFLAG(-pedantic-errors PEDANTIC_ERRORS_SUPPORTED)
    ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
    ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)
    ADD_CFLAG(-Werror WARNINGS_ARE_ERRORS_SUPPORTED)
    ADD_CFLAG(-fstack-check STACK_CHECK_SUPPORTED)
    ADD_CFLAG(-fstack-protector-all STACK_PROTECTOR_ALL_SUPPORTED)
    ADD_CFLAG(-ftrapv TRAPV_SUPPORTED)
    ADD_CFLAG(-fbounds-check BOUNDS_CHECKING_SUPPORTED)
    ADD_CFLAG(-g DEBUGGING_SUPPORTED)
    ADD_CFLAG(-O0 O0_SUPPORTED)
  ELSE()
    ADD_CFLAG(-pedantic PEDANTIC_SUPPORTED)
    ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
    ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)
    ADD_CFLAG(-fexpensive-optimizations
      EXPENSIVE_OPTIMIZATIONS_SUPPORTED)
    ADD_CFLAG(-finline-functions INLINE_FUNCTIONS_SUPPORTED)
    ADD_CFLAG(-fomit-frame-pointer OMIT_FRAME_POINTER_SUPPORTED)
    ADD_CFLAG(-fstrict-aliasing STRICT_ALIASING_SUPPORTED)
    ADD_CFLAG(-fstrict-overflow STRICT_OVERFLOW_SUPPORTED)
    ADD_CFLAG(-march=native ARCH_NATIVE_SUPPORTED)
    ADD_CFLAG(-O3 O3_SUPPORTED)
  ENDIF()
ELSEIF(CLANG)
  ADD_CFLAG(-std=c11, C11_SUPPORTED)

  IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
    ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)
    ADD_CFLAG(-Werror WARNINGS_ARE_ERRORS_SUPPORTED)
    ADD_CFLAG(-fbounds-checking BOUNDS_CHECKING_SUPPORTED)
    ADD_CFLAG(-fno-unroll-loops NO_LOOP_UNROLLING_SUPPORTED)
    ADD_CFLAG(-fsanitize=address,thread,undefined
      ADDRESS_THREAD_UB_SANITIZATION_SUPPORTED)
    ADD_CFLAG(-fstack-protector-all STACK_PROTECTOR_ALL_SUPPORTED)
    ADD_CFLAG(-ftrapv TRAPV_SUPPORTED)
    ADD_CFLAG(-g DEBUGGING_SUPPORTED)
    ADD_CFLAG(-O0 O0_SUPPORTED)
  ELSE()
    ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
    ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)
    ADD_CFLAG(-fno-stack-protector NO_STACK_PROTECTOR_SUPPORTED)
    ADD_CFLAG(-fstrict-enums STRICT_ENUMS_SUPPORTED)
    ADD_CFLAG(-march=native ARCH_NATIVE_SUPPORTED)
    ADD_CFLAG(-O3 O3_SUPPORTED)
  ENDIF()
ENDIF()

FIND_PACKAGE(GLib REQUIRED)
INCLUDE_DIRECTORIES(${GLIB_INCLUDE_DIRS})

FIND_PACKAGE(PCREPOSIX REQUIRED)
INCLUDE_DIRECTORIES(${PCRE_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

IF(GCC_OR_CLANG)
  ADD_DEFINITIONS(-D_GNU_SOURCE)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)
SET(SST_SOURCE_FILES
  ${CMAKE_SOURCE_DIR}/src/lexer.c
  ${CMAKE_SOURCE_DIR}/src/parser.c
  ${CMAKE_SOURCE_DIR}/src/splitter.c
  ${CMAKE_SOURCE_DIR}/src/str.c
  ${CMAKE_SOURCE_DIR}/src/utils.c
  ${CMAKE_SOURCE_DIR}/src/main.c
)

SET(SST_LIBRARIES ${SST_LIBRARIES}
  ${GLIB_LIBRARIES}
  ${PCRE_LIBRARIES}
)

ADD_EXECUTABLE(sst ${SST_SOURCE_FILES})
TARGET_LINK_LIBRARIES(sst ${SST_LIBRARIES})

SET(BIN_DIR "${PREFIX}/bin")
SET(LIB_DIR "${PREFIX}/lib")
SET(INCLUDE_DIR "${PREFIX}/include")
SET(SHARE_DIR "${PREFIX}/share")

INSTALL(
  TARGETS sst
  RUNTIME DESTINATION ${BIN_DIR}
  LIBRARY DESTINATION ${LIB_DIR}
  ARCHIVE DESTINATION ${LIB_DIR}
)

# vi: ai:ts=2:sw=2:et

